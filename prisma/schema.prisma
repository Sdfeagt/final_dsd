datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Trip {
  id             String           @id @default(uuid())
  name           String
  ownerId        String
  participantsID participantsID[]
  destination    String
  trip_days      Days[]
  hotelId        String
  hotel          Hotel            @relation(fields: [hotelId], references: [id])
  budget         Int
  budget_split   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
}

model participantsID {
  id            String  @id @default(uuid())
  participantID String
  Trip          Trip?   @relation(fields: [tripId], references: [id])
  tripId        String?

  @@index([tripId])
}

model Days {
  id     String   @id @default(uuid())
  day    DateTime
  Trip   Trip?    @relation(fields: [tripId], references: [id])
  tripId String?

  @@index([tripId])
}

model User {
  id       String     @id @default(uuid())
  userId   String
  tripData TripData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TripData {
  id              String            @id @default(uuid())
  preferences     UserPreferences[]
  tripId          String
  confirmed       Boolean
  trip_start      DateTime
  trip_end        DateTime
  personal_budget Int
  userId          String
  user            User              @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserPreferences {
  id               String            @id @default(uuid())
  smallPreferences SmallPreference[]
  TripData         TripData?         @relation(fields: [tripDataId], references: [id])
  tripDataId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tripDataId])
}

model SmallPreference {
  id   String @id @default(uuid())
  name String

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  UserPreferences   UserPreferences? @relation(fields: [userPreferencesId], references: [id])
  userPreferencesId String?

  @@index([userPreferencesId])
}

//Below not used
model HotelPreference {
  hotelId      String
  preferenceId String

  hotel      Hotel               @relation(fields: [hotelId], references: [id])
  preference AvailablePreference @relation(fields: [preferenceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([hotelId, preferenceId])
  @@index([hotelId])
  @@index([preferenceId])
}

model Destination {
  id        String  @id @default(uuid())
  name      String
  continent String
  hotels    Hotel[]
}

model Hotel {
  id            String            @id @default(uuid())
  name          String
  preferences   HotelPreference[]
  trips         Trip[]
  destinationId String
  destination   Destination       @relation(fields: [destinationId], references: [id])
  price         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([destinationId])
}

model AvailablePreference {
  id     String            @id @default(uuid())
  name   String
  hotels HotelPreference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
