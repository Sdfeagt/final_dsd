datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Trip {
  id           String        @id @default(uuid())
  name         String
  ownerId      String
  participants Participant[]
  destination  String
  trip_start   DateTime
  trip_end     DateTime
  hotelId      String
  hotel        Hotel         @relation(fields: [hotelId], references: [id])
  budget       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
}

model Participant {
  id                  String               @id @default(uuid())
  userId              String
  tripId              String
  confirmed           Boolean
  trip_start          DateTime
  trip_end            DateTime
  trip                Trip                 @relation(fields: [tripId], references: [id])
  personal_budget     Int
  personalPreferences PersonalPreference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tripId])
}

model Hotel {
  id            String            @id @default(uuid())
  name          String
  preferences   HotelPreference[]
  trips         Trip[]
  destinationId String
  destination   Destination       @relation(fields: [destinationId], references: [id])
  price         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([destinationId])
}

model AvailablePreference {
  id     String            @id @default(uuid())
  name   String
  hotels HotelPreference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalPreference {
  id            String      @id @default(uuid())
  preference    String
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([participantId])
}

model HotelPreference {
  hotelId      String
  preferenceId String

  hotel      Hotel               @relation(fields: [hotelId], references: [id])
  preference AvailablePreference @relation(fields: [preferenceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([hotelId, preferenceId])
  @@index([hotelId])
  @@index([preferenceId])
}

model Destination {
  id        String  @id @default(uuid())
  name      String
  continent String
  hotels    Hotel[]
}
